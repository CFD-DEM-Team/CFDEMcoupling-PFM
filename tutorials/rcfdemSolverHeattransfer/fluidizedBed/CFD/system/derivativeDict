dU
{
 functionObjectLibs ("libutilityFunctionObjects.so");
 type coded;
 redirectType dU;
 outputControl timeStep;
 outputInterval  40;

codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude 
        #};

 code
 #{

   const volVectorField& U = mesh().lookupObject<volVectorField>("Us");
   static autoPtr<volVectorField> p1Field;
   static autoPtr<volVectorField> p2Field;

   if(!p1Field.valid())
   {
      Info << "Creating UgU" << nl;

      p1Field.set
      (
         new volVectorField
         (
            IOobject
            (
               "UgU",
               mesh().time().timeName(),
               U.mesh(),
               IOobject::NO_READ,
               IOobject::NO_WRITE
            ),
            U&fvc::grad(U)
         )
      );
   }
 
   if(!p2Field.valid())
   {
      Info << "Creating dUdt" << nl;

      p2Field.set
      (
         new volVectorField
         (
            IOobject
            (
               "dUdt",
               mesh().time().timeName(),
               U.mesh(),
               IOobject::NO_READ,
               IOobject::NO_WRITE
            ),
            fvc::ddt(U)
         )
      );
   }

   volVectorField &UgU = p1Field();
   volVectorField &dUdt = p2Field();

   UgU.checkIn();
   dUdt.checkIn();

   UgU =  U&fvc::grad(U);
   dUdt = fvc::ddt(U);
 #};
}
