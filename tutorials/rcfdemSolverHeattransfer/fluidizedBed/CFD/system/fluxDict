species
{
 functionObjectLibs ("libutilityFunctionObjects.so");
 type coded;
 redirectType species;
 outputControl timeStep;

codeOptions
        #{
            -I$(LIB_SRC)/thermophysicalModels/basic/lnInclude \
            -I$(LIB_SRC)/finiteVolume/lnInclude \
            -I$(LIB_SRC)/meshTools/lnInclude \
            -I$(LIB_SRC)/fvOptions/lnInclude \
            -I$(LIB_SRC)/sampling/lnInclude
        #};

codeLibs
        #{
            -lfluidThermophysicalModels \
            -lfiniteVolume \
            -lmeshTools \
            -lfvOptions \
            -lsampling 
        #};

codeInclude
        #{
            #include "fvIOoptionList.H"
            #include "rhoThermo.H"
        #};


 code
 #{



   const volVectorField& U = mesh().lookupObject<volVectorField>("U");
   const volScalarField& voidfraction = mesh().lookupObject<volScalarField>("voidfraction");
   const volScalarField& rho = mesh().lookupObject<volScalarField>("rho");
   const volScalarField& T = mesh().lookupObject<volScalarField>("T");

  

   static autoPtr<volVectorField> fField;

   if(!fField.valid())
   {
      Info << "Creating flux field" << nl;

    wordList bTypes(U.boundaryField().size());

    forAll(bTypes, patchI)
    {
        const fvPatchField<vector>& pf = U.boundaryField()[patchI];
       // if (isA<fixedValueFvPatchVectorField>(pf))
       // {
       //     bTypes[patchI] = fixedValueFvPatchScalarField::typeName;
       // }
       // else
       // {
            bTypes[patchI] = zeroGradientFvPatchScalarField::typeName;
       // }
    }

      fField.set
      (
         new volVectorField
         (
            IOobject
            (
              "flux",
              mesh().time().timeName(),
              mesh(),
              IOobject::READ_IF_PRESENT,
              IOobject::AUTO_WRITE
            ),
            mesh(),
            dimensionedVector("zero", dimless, vector(0,0,0)),
            bTypes
         )
      );
   }

   volVectorField &flux = fField();

   flux.checkIn();
   
   flux=U*voidfraction*T*rho*1010;
   
 #};
}

